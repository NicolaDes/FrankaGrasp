// Generated by gencpp from file agile_grasp/Grasp.msg
// DO NOT EDIT!


#ifndef AGILE_GRASP_MESSAGE_GRASP_H
#define AGILE_GRASP_MESSAGE_GRASP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <std_msgs/Float32.h>

namespace agile_grasp
{
template <class ContainerAllocator>
struct Grasp_
{
  typedef Grasp_<ContainerAllocator> Type;

  Grasp_()
    : center()
    , axis()
    , approach()
    , surface_center()
    , width()  {
    }
  Grasp_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , axis(_alloc)
    , approach(_alloc)
    , surface_center(_alloc)
    , width(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _axis_type;
  _axis_type axis;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _approach_type;
  _approach_type approach;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _surface_center_type;
  _surface_center_type surface_center;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::agile_grasp::Grasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agile_grasp::Grasp_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp_

typedef ::agile_grasp::Grasp_<std::allocator<void> > Grasp;

typedef boost::shared_ptr< ::agile_grasp::Grasp > GraspPtr;
typedef boost::shared_ptr< ::agile_grasp::Grasp const> GraspConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agile_grasp::Grasp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agile_grasp::Grasp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace agile_grasp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'agile_grasp': ['/home/sphero/code/FrankaGrasp/src/agile_grasp/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::agile_grasp::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agile_grasp::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agile_grasp::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agile_grasp::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agile_grasp::Grasp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agile_grasp::Grasp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agile_grasp::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e812ccd1fa0a0ad5be105b582346ad98";
  }

  static const char* value(const ::agile_grasp::Grasp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe812ccd1fa0a0ad5ULL;
  static const uint64_t static_value2 = 0xbe105b582346ad98ULL;
};

template<class ContainerAllocator>
struct DataType< ::agile_grasp::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agile_grasp/Grasp";
  }

  static const char* value(const ::agile_grasp::Grasp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agile_grasp::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 center\n\
geometry_msgs/Vector3 axis\n\
geometry_msgs/Vector3 approach\n\
geometry_msgs/Vector3 surface_center\n\
std_msgs/Float32 width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::agile_grasp::Grasp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agile_grasp::Grasp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.axis);
      stream.next(m.approach);
      stream.next(m.surface_center);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grasp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agile_grasp::Grasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agile_grasp::Grasp_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "axis: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.axis);
    s << indent << "approach: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.approach);
    s << indent << "surface_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.surface_center);
    s << indent << "width: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGILE_GRASP_MESSAGE_GRASP_H
