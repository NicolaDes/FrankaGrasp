//#line 2 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the point_cloud_utils package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __point_cloud_utils__UTILCONFIG_H__
#define __point_cloud_utils__UTILCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace point_cloud_utils
{
  class utilConfigStatics;
  
  class utilConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(utilConfig &config, const utilConfig &max, const utilConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const utilConfig &config1, const utilConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, utilConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const utilConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, utilConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const utilConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T utilConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (utilConfig::* field);

      virtual void clamp(utilConfig &config, const utilConfig &max, const utilConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const utilConfig &config1, const utilConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, utilConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const utilConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, utilConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const utilConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 14 "../cfg/util.cfg"
      bool run;
//#line 15 "../cfg/util.cfg"
      bool debug;
//#line 16 "../cfg/util.cfg"
      bool transform_to_global;
//#line 17 "../cfg/util.cfg"
      bool clean_missing_points;
//#line 18 "../cfg/util.cfg"
      bool remove_plane;
//#line 19 "../cfg/util.cfg"
      double ransac_tol;
//#line 20 "../cfg/util.cfg"
      int ransac_iter;
//#line 21 "../cfg/util.cfg"
      bool remove_outlier;
//#line 22 "../cfg/util.cfg"
      int outlier_mean_k;
//#line 23 "../cfg/util.cfg"
      double outlier_StddevMulThresh;
//#line 24 "../cfg/util.cfg"
      bool remove_user_plane;
//#line 25 "../cfg/util.cfg"
      double user_plane_a;
//#line 26 "../cfg/util.cfg"
      double user_plane_b;
//#line 27 "../cfg/util.cfg"
      double user_plane_c;
//#line 28 "../cfg/util.cfg"
      double user_plane_d;
//#line 29 "../cfg/util.cfg"
      bool estimate_normals;
//#line 30 "../cfg/util.cfg"
      int normals_k_neighbors;
//#line 31 "../cfg/util.cfg"
      bool write_binary;
//#line 32 "../cfg/util.cfg"
      bool write_depth_map;
//#line 33 "../cfg/util.cfg"
      int write_ascii_precision;
//#line 34 "../cfg/util.cfg"
      bool write_next;
//#line 35 "../cfg/util.cfg"
      std::string write_file_prefix;
//#line 36 "../cfg/util.cfg"
      int write_file_num;
//#line 138 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("utilConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const utilConfig &__max__ = __getMax__();
      const utilConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const utilConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const utilConfig &__getDefault__();
    static const utilConfig &__getMax__();
    static const utilConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const utilConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void utilConfig::ParamDescription<std::string>::clamp(utilConfig &config, const utilConfig &max, const utilConfig &min) const
  {
    return;
  }

  class utilConfigStatics
  {
    friend class utilConfig;
    
    utilConfigStatics()
    {
//#line 14 "../cfg/util.cfg"
      __min__.run = 0;
//#line 14 "../cfg/util.cfg"
      __max__.run = 1;
//#line 14 "../cfg/util.cfg"
      __default__.run = 0;
//#line 14 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("run", "bool", 0, "Whether or not the util node is running.", "", &utilConfig::run)));
//#line 15 "../cfg/util.cfg"
      __min__.debug = 0;
//#line 15 "../cfg/util.cfg"
      __max__.debug = 1;
//#line 15 "../cfg/util.cfg"
      __default__.debug = 0;
//#line 15 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("debug", "bool", 0, "Whether or not to print debug messages.", "", &utilConfig::debug)));
//#line 16 "../cfg/util.cfg"
      __min__.transform_to_global = 0;
//#line 16 "../cfg/util.cfg"
      __max__.transform_to_global = 1;
//#line 16 "../cfg/util.cfg"
      __default__.transform_to_global = 0;
//#line 16 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("transform_to_global", "bool", 0, "Whether or not to transform point cloud to global frame.", "", &utilConfig::transform_to_global)));
//#line 17 "../cfg/util.cfg"
      __min__.clean_missing_points = 0;
//#line 17 "../cfg/util.cfg"
      __max__.clean_missing_points = 1;
//#line 17 "../cfg/util.cfg"
      __default__.clean_missing_points = 0;
//#line 17 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("clean_missing_points", "bool", 0, "Whether or not to clean NaN points.", "", &utilConfig::clean_missing_points)));
//#line 18 "../cfg/util.cfg"
      __min__.remove_plane = 0;
//#line 18 "../cfg/util.cfg"
      __max__.remove_plane = 1;
//#line 18 "../cfg/util.cfg"
      __default__.remove_plane = 0;
//#line 18 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("remove_plane", "bool", 0, "Whether or not to use RANSAC to remove the plane.", "", &utilConfig::remove_plane)));
//#line 19 "../cfg/util.cfg"
      __min__.ransac_tol = 0.0;
//#line 19 "../cfg/util.cfg"
      __max__.ransac_tol = 0.1;
//#line 19 "../cfg/util.cfg"
      __default__.ransac_tol = 0.025;
//#line 19 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("ransac_tol", "double", 0, "The tolerance for plane detection.", "", &utilConfig::ransac_tol)));
//#line 20 "../cfg/util.cfg"
      __min__.ransac_iter = 1;
//#line 20 "../cfg/util.cfg"
      __max__.ransac_iter = 100;
//#line 20 "../cfg/util.cfg"
      __default__.ransac_iter = 20;
//#line 20 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<int>("ransac_iter", "int", 0, "The number of iterations to run ransac for.", "", &utilConfig::ransac_iter)));
//#line 21 "../cfg/util.cfg"
      __min__.remove_outlier = 0;
//#line 21 "../cfg/util.cfg"
      __max__.remove_outlier = 1;
//#line 21 "../cfg/util.cfg"
      __default__.remove_outlier = 0;
//#line 21 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("remove_outlier", "bool", 0, "Whether or not to use remove outliers using statistical outlier removal.", "", &utilConfig::remove_outlier)));
//#line 22 "../cfg/util.cfg"
      __min__.outlier_mean_k = 1;
//#line 22 "../cfg/util.cfg"
      __max__.outlier_mean_k = 200;
//#line 22 "../cfg/util.cfg"
      __default__.outlier_mean_k = 50;
//#line 22 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<int>("outlier_mean_k", "int", 0, "The number of points (k) to use for mean distance estimation.", "", &utilConfig::outlier_mean_k)));
//#line 23 "../cfg/util.cfg"
      __min__.outlier_StddevMulThresh = 0.0;
//#line 23 "../cfg/util.cfg"
      __max__.outlier_StddevMulThresh = 10.0;
//#line 23 "../cfg/util.cfg"
      __default__.outlier_StddevMulThresh = 1.0;
//#line 23 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("outlier_StddevMulThresh", "double", 0, "The standard deviation multiplier threshold. All points outside the +/- * std_mul will be considered outliers.", "", &utilConfig::outlier_StddevMulThresh)));
//#line 24 "../cfg/util.cfg"
      __min__.remove_user_plane = 0;
//#line 24 "../cfg/util.cfg"
      __max__.remove_user_plane = 1;
//#line 24 "../cfg/util.cfg"
      __default__.remove_user_plane = 0;
//#line 24 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("remove_user_plane", "bool", 0, "Whether or not to remove a user-specified plane.  All points with ax+by+cz+d >= 0 are kept.", "", &utilConfig::remove_user_plane)));
//#line 25 "../cfg/util.cfg"
      __min__.user_plane_a = -std::numeric_limits<double>::infinity();
//#line 25 "../cfg/util.cfg"
      __max__.user_plane_a = std::numeric_limits<double>::infinity();
//#line 25 "../cfg/util.cfg"
      __default__.user_plane_a = 0.0;
//#line 25 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("user_plane_a", "double", 0, "Value of a for user-specified plane..", "", &utilConfig::user_plane_a)));
//#line 26 "../cfg/util.cfg"
      __min__.user_plane_b = -std::numeric_limits<double>::infinity();
//#line 26 "../cfg/util.cfg"
      __max__.user_plane_b = std::numeric_limits<double>::infinity();
//#line 26 "../cfg/util.cfg"
      __default__.user_plane_b = 0.0;
//#line 26 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("user_plane_b", "double", 0, "Value of b for user-specified plane..", "", &utilConfig::user_plane_b)));
//#line 27 "../cfg/util.cfg"
      __min__.user_plane_c = -std::numeric_limits<double>::infinity();
//#line 27 "../cfg/util.cfg"
      __max__.user_plane_c = std::numeric_limits<double>::infinity();
//#line 27 "../cfg/util.cfg"
      __default__.user_plane_c = 0.0;
//#line 27 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("user_plane_c", "double", 0, "Value of c for user-specified plane..", "", &utilConfig::user_plane_c)));
//#line 28 "../cfg/util.cfg"
      __min__.user_plane_d = -std::numeric_limits<double>::infinity();
//#line 28 "../cfg/util.cfg"
      __max__.user_plane_d = std::numeric_limits<double>::infinity();
//#line 28 "../cfg/util.cfg"
      __default__.user_plane_d = 1.0;
//#line 28 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<double>("user_plane_d", "double", 0, "Value of d for user-specified plane..", "", &utilConfig::user_plane_d)));
//#line 29 "../cfg/util.cfg"
      __min__.estimate_normals = 0;
//#line 29 "../cfg/util.cfg"
      __max__.estimate_normals = 1;
//#line 29 "../cfg/util.cfg"
      __default__.estimate_normals = 0;
//#line 29 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("estimate_normals", "bool", 0, "Whether or not to estimate normals.", "", &utilConfig::estimate_normals)));
//#line 30 "../cfg/util.cfg"
      __min__.normals_k_neighbors = 1;
//#line 30 "../cfg/util.cfg"
      __max__.normals_k_neighbors = 200;
//#line 30 "../cfg/util.cfg"
      __default__.normals_k_neighbors = 20;
//#line 30 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<int>("normals_k_neighbors", "int", 0, "The number of neighboring points (k) to use for normal estimation.", "", &utilConfig::normals_k_neighbors)));
//#line 31 "../cfg/util.cfg"
      __min__.write_binary = 0;
//#line 31 "../cfg/util.cfg"
      __max__.write_binary = 1;
//#line 31 "../cfg/util.cfg"
      __default__.write_binary = 0;
//#line 31 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("write_binary", "bool", 0, "Whether or not to write as a binary file.", "", &utilConfig::write_binary)));
//#line 32 "../cfg/util.cfg"
      __min__.write_depth_map = 0;
//#line 32 "../cfg/util.cfg"
      __max__.write_depth_map = 1;
//#line 32 "../cfg/util.cfg"
      __default__.write_depth_map = 0;
//#line 32 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("write_depth_map", "bool", 0, "Whether or not to save the disparity image.", "", &utilConfig::write_depth_map)));
//#line 33 "../cfg/util.cfg"
      __min__.write_ascii_precision = 1;
//#line 33 "../cfg/util.cfg"
      __max__.write_ascii_precision = 99;
//#line 33 "../cfg/util.cfg"
      __default__.write_ascii_precision = 12;
//#line 33 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<int>("write_ascii_precision", "int", 0, "The level of precision for writing as ascii", "", &utilConfig::write_ascii_precision)));
//#line 34 "../cfg/util.cfg"
      __min__.write_next = 0;
//#line 34 "../cfg/util.cfg"
      __max__.write_next = 1;
//#line 34 "../cfg/util.cfg"
      __default__.write_next = 0;
//#line 34 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<bool>("write_next", "bool", 0, "Whether or not to save the next point cloud to file.", "", &utilConfig::write_next)));
//#line 35 "../cfg/util.cfg"
      __min__.write_file_prefix = "";
//#line 35 "../cfg/util.cfg"
      __max__.write_file_prefix = "";
//#line 35 "../cfg/util.cfg"
      __default__.write_file_prefix = "pcd";
//#line 35 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<std::string>("write_file_prefix", "str", 0, "The prefix of the file to write.", "", &utilConfig::write_file_prefix)));
//#line 36 "../cfg/util.cfg"
      __min__.write_file_num = 0;
//#line 36 "../cfg/util.cfg"
      __max__.write_file_num = 9999;
//#line 36 "../cfg/util.cfg"
      __default__.write_file_num = 0;
//#line 36 "../cfg/util.cfg"
      __param_descriptions__.push_back(utilConfig::AbstractParamDescriptionConstPtr(new utilConfig::ParamDescription<int>("write_file_num", "int", 0, "The number of the next file to write", "", &utilConfig::write_file_num)));
//#line 239 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<utilConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<utilConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    utilConfig __max__;
    utilConfig __min__;
    utilConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const utilConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static utilConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &utilConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const utilConfig &utilConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const utilConfig &utilConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const utilConfig &utilConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<utilConfig::AbstractParamDescriptionConstPtr> &utilConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const utilConfigStatics *utilConfig::__get_statics__()
  {
    const static utilConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = utilConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __UTILRECONFIGURATOR_H__
