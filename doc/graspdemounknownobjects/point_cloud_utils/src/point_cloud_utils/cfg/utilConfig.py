## *********************************************************
## 
## File autogenerated for the point_cloud_utils package 
## by the dynamic_reconfigure package.
## Please do not edit.
## 
## ********************************************************/

##**********************************************************
## Software License Agreement (BSD License)
##
##  Copyright (c) 2008, Willow Garage, Inc.
##  All rights reserved.
##
##  Redistribution and use in source and binary forms, with or without
##  modification, are permitted provided that the following conditions
##  are met:
##
##   * Redistributions of source code must retain the above copyright
##     notice, this list of conditions and the following disclaimer.
##   * Redistributions in binary form must reproduce the above
##     copyright notice, this list of conditions and the following
##     disclaimer in the documentation and/or other materials provided
##     with the distribution.
##   * Neither the name of the Willow Garage nor the names of its
##     contributors may be used to endorse or promote products derived
##     from this software without specific prior written permission.
##
##  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
##  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
##  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
##  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
##  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
##  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
##  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
##  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
##  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
##  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
##  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
##  POSSIBILITY OF SUCH DAMAGE.
##**********************************************************/

config_description = [{'srcline': 14, 'description': 'Whether or not the util node is running.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'run', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 15, 'description': 'Whether or not to print debug messages.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'debug', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 16, 'description': 'Whether or not to transform point cloud to global frame.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'transform_to_global', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 17, 'description': 'Whether or not to clean NaN points.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'clean_missing_points', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 18, 'description': 'Whether or not to use RANSAC to remove the plane.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'remove_plane', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 19, 'description': 'The tolerance for plane detection.', 'max': 0.10000000000000001, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'ransac_tol', 'edit_method': '', 'default': 0.025000000000000001, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 20, 'description': 'The number of iterations to run ransac for.', 'max': 100, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/util.cfg', 'name': 'ransac_iter', 'edit_method': '', 'default': 20, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 21, 'description': 'Whether or not to use remove outliers using statistical outlier removal.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'remove_outlier', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 22, 'description': 'The number of points (k) to use for mean distance estimation.', 'max': 200, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/util.cfg', 'name': 'outlier_mean_k', 'edit_method': '', 'default': 50, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 23, 'description': 'The standard deviation multiplier threshold. All points outside the +/- * std_mul will be considered outliers.', 'max': 10.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'outlier_StddevMulThresh', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 24, 'description': 'Whether or not to remove a user-specified plane.  All points with ax+by+cz+d >= 0 are kept.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'remove_user_plane', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 25, 'description': 'Value of a for user-specified plane..', 'max': 'std::numeric_limits<double>::infinity()', 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'user_plane_a', 'edit_method': '', 'default': 0.0, 'level': 0, 'min': '-std::numeric_limits<double>::infinity()', 'type': 'double'}, {'srcline': 26, 'description': 'Value of b for user-specified plane..', 'max': 'std::numeric_limits<double>::infinity()', 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'user_plane_b', 'edit_method': '', 'default': 0.0, 'level': 0, 'min': '-std::numeric_limits<double>::infinity()', 'type': 'double'}, {'srcline': 27, 'description': 'Value of c for user-specified plane..', 'max': 'std::numeric_limits<double>::infinity()', 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'user_plane_c', 'edit_method': '', 'default': 0.0, 'level': 0, 'min': '-std::numeric_limits<double>::infinity()', 'type': 'double'}, {'srcline': 28, 'description': 'Value of d for user-specified plane..', 'max': 'std::numeric_limits<double>::infinity()', 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/util.cfg', 'name': 'user_plane_d', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': '-std::numeric_limits<double>::infinity()', 'type': 'double'}, {'srcline': 29, 'description': 'Whether or not to estimate normals.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'estimate_normals', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 30, 'description': 'The number of neighboring points (k) to use for normal estimation.', 'max': 200, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/util.cfg', 'name': 'normals_k_neighbors', 'edit_method': '', 'default': 20, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 31, 'description': 'Whether or not to write as a binary file.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'write_binary', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 32, 'description': 'Whether or not to save the disparity image.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'write_depth_map', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 33, 'description': 'The level of precision for writing as ascii', 'max': 99, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/util.cfg', 'name': 'write_ascii_precision', 'edit_method': '', 'default': 12, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 34, 'description': 'Whether or not to save the next point cloud to file.', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/util.cfg', 'name': 'write_next', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 35, 'description': 'The prefix of the file to write.', 'max': '', 'cconsttype': 'const char * const', 'ctype': 'std::string', 'srcfile': '../cfg/util.cfg', 'name': 'write_file_prefix', 'edit_method': '', 'default': 'pcd', 'level': 0, 'min': '', 'type': 'str'}, {'srcline': 36, 'description': 'The number of the next file to write', 'max': 9999, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/util.cfg', 'name': 'write_file_num', 'edit_method': '', 'default': 0, 'level': 0, 'min': 0, 'type': 'int'}]

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

for param in config_description:
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

