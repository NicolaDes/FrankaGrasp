/* CURRENT options:
 * KEIN SAMPLING, KEINE SEGMENTIERUNG siehe "david"   (14.10.2011)
 *
 * David Fischinger -TUW
 * 1.7. 2011
 *
 * input:
 *
 *   pointcloud from camera1 read from topic /SS/points2_cam1
 *   pointcloud from camera2 read from topic /SS/points2_cam2
 *
 * output:
 *   pointcloud merged, filtered, downsampled and segmented from the two
 *   input point clouds w.r.t. tf_frame /world on topic /SS/points2
 *
 */

#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include "pcl/io/io.h"
#include "pcl_ros/publisher.h"
#include "pcl_ros/transforms.h"
#include <pcl/filters/passthrough.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/features/normal_3d.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/PointCloud2.h"

#include "tf/tf.h"
#include "tf/transform_broadcaster.h"
#include "tf/transform_datatypes.h"
#include "tf/transform_listener.h"

#include <sstream>


tf::TransformListener *tf_listener;


class CPCMerge
{
public:
	bool pc_cam1_filled, pc_cam2_filled;
	ros::Publisher pc_merged_pub;
	ros::Publisher nr_segmented_pc_pub;
	ros::Subscriber pc_cam1_sub;
	ros::Subscriber pc_cam2_sub;
	sensor_msgs::PointCloud2 pc_cam1;
	sensor_msgs::PointCloud2 pc_cam2;
	sensor_msgs::PointCloud2 pc_merged;
  	ros::NodeHandle nh;

	void publish_merged_pc();  	//merges pointclouds from 2 different cameras
	void filter_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged, float x_min=0.6, float x_max=1.3, float y_min=-0.6, float y_max=0.0, float z_min=0.04, float z_max = 1.0 );			//filters outliers and points outside difined region
	void downsampling_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged);
	void segment_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged );
	void pc_cam1_callback(const sensor_msgs::PointCloud2ConstPtr& pcl_in); //saves pc from cam1
	void pc_cam2_callback(const sensor_msgs::PointCloud2ConstPtr& pcl_in); //saves pc from cam2

	CPCMerge(ros::NodeHandle nh)
	{
		this->nh = nh;
		pc_cam1_filled = pc_cam2_filled = false;
		//define publisher
		this->pc_merged_pub = nh.advertise<sensor_msgs::PointCloud2>("SS/points2", 5);
		this->nr_segmented_pc_pub = nh.advertise<std_msgs::String>("pc_merge/nr_segmented_pcs", 1); //publish nr of segmented point clouds
		//define subscriber
		this->pc_cam1_sub = nh.subscribe("SS/points2_cam1",1, &CPCMerge::pc_cam1_callback, this);
		this->pc_cam2_sub = nh.subscribe("SS/points2_cam2",1, &CPCMerge::pc_cam2_callback, this);
	}
};

void CPCMerge::publish_merged_pc()
{
	ROS_INFO("publish_merged_pc() started");
	pcl::PointCloud<pcl::PointXYZ> pcl_cloud_cam1;
	pcl::PointCloud<pcl::PointXYZ> pcl_cloud_cam2;
	pcl::PointCloud<pcl::PointXYZ> pcl_cloud_merged;
	pcl::fromROSMsg (pc_cam1, pcl_cloud_cam1);
	pcl::fromROSMsg (pc_cam2, pcl_cloud_cam2); //david ACHTUNG hier aender fuer: nehme nur eine camera-pc 14.10.2011
	pcl_cloud_merged = pcl_cloud_cam1;
	pcl_cloud_merged+= pcl_cloud_cam2;  //david ACHTUNG hier aender fuer:nehme nur eine camera-pc 14.10.2011

	//Filter Data
	//this->filter_pc(&pcl_cloud_merged); //david !!! 18.10.2011

	//Downsampling point cloud
	//this->downsampling_pc(&pcl_cloud_merged);

	//cluster point cloud
	//this->segment_pc(&pcl_cloud_merged);

	// publish whole point cloud
    pcl::toROSMsg(pcl_cloud_merged, this->pc_merged); //david: uncomment if segmentation is used

    //publish manipulated point cloud
	this->pc_merged_pub.publish(this->pc_merged);  //david: uncomment if segmentation is used!!
	pc_cam1_filled = false;
	pc_cam2_filled = false;
}

// filter point cloud and cut of points outside a defined region
void CPCMerge::filter_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged, float x_min, float x_max, float y_min, float y_max, float z_min, float z_max )
{
	// Create the filtering object
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered_z (new pcl::PointCloud<pcl::PointXYZ>);
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered_y (new pcl::PointCloud<pcl::PointXYZ>);
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filtered_x (new pcl::PointCloud<pcl::PointXYZ>);
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);
    *cloud = *pcl_cloud_merged;
	pcl::PassThrough<pcl::PointXYZ> pass;

	ROS_INFO("Filtering outliers and cutting region");

	std::cerr << "Cloud before filtering/cutting: " << std::endl;
	std::cerr << *cloud << std::endl;

	//Filter w.r.t. axis z
	pass.setInputCloud (cloud);
	pass.setFilterFieldName ("z");
	pass.setFilterLimits (z_min, z_max);
	//pass.setFilterLimitsNegative (true);
	pass.filter (*cloud_filtered_z);

	//Filter w.r.t. axis y
	pass.setInputCloud(cloud_filtered_z);
	pass.setFilterFieldName ("y");
	pass.setFilterLimits (y_min, y_max);
	pass.filter (*cloud_filtered_y);

	//Filter w.r.t. axis x
	pass.setInputCloud(cloud_filtered_y);
	pass.setFilterFieldName ("x");
	pass.setFilterLimits (x_min, x_max);
	pass.filter (*cloud_filtered_x);

	std::cerr << "Cloud after cutting and before outlier filtering: " << std::endl;
	std::cerr << *cloud_filtered_x << std::endl;

	//Create the filtering object
	pcl::StatisticalOutlierRemoval<pcl::PointXYZ> sor;
	sor.setInputCloud(cloud_filtered_x);
	sor.setMeanK(50);
	sor.setStddevMulThresh (1.0);
	sor.filter(*pcl_cloud_merged);

	std::cerr << "Cloud after outlier filtering: " << std::endl;
	std::cerr << *pcl_cloud_merged << std::endl;
}

// downsampling: reduce the number of points of the pc
void CPCMerge::downsampling_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged )
{
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_in (new pcl::PointCloud<pcl::PointXYZ>);
    *cloud_in = *pcl_cloud_merged;

    std::cerr << "PointCloud before downsampling: " << cloud_in->width * cloud_in->height
           << " data points (" << pcl::getFieldsList (*cloud_in) << "). \n";

    // Create the VoxelGrid object
     pcl::VoxelGrid<pcl::PointXYZ> vg;
     vg.setInputCloud (cloud_in);
     vg.setLeafSize (0.01, 0.01, 0.01);
     vg.filter (*pcl_cloud_merged);

     std::cerr << "PointCloud after downsampling: " << pcl_cloud_merged->width * pcl_cloud_merged->height
            << " data points (" << pcl::getFieldsList (*pcl_cloud_merged) << "). \n";
}



// segment the merged, filtered, downsampled point cloud
void CPCMerge::segment_pc(pcl::PointCloud<pcl::PointXYZ> * pcl_cloud_merged )
{
	using namespace pcl;
	using namespace std;

    PointCloud<PointXYZ>::Ptr cloud_in (new PointCloud<PointXYZ>);
    *cloud_in = *pcl_cloud_merged;

    PCDWriter writer;

    // Creating the KdTree object for the search method of the extraction
    KdTree<PointXYZ>::Ptr tree (new KdTreeFLANN<PointXYZ>);
    tree->setInputCloud (cloud_in);

    vector<PointIndices> cluster_indices;
    EuclideanClusterExtraction<PointXYZ> ec;
    ec.setClusterTolerance (0.02); // 2cm
    ec.setMinClusterSize (50);
    ec.setMaxClusterSize (25000);
    ec.setSearchMethod (tree);
    ec.setInputCloud( cloud_in);
    ec.extract (cluster_indices);

    int j = 0;
    for (vector<PointIndices>::const_iterator it = cluster_indices.begin (); it != cluster_indices.end (); ++it)
    {
        PointCloud<PointXYZ>::Ptr cloud_cluster (new PointCloud<PointXYZ>);
        for (vector<int>::const_iterator pit = it->indices.begin (); pit != it->indices.end (); pit++)
            cloud_cluster->points.push_back (cloud_in->points[*pit]);

        cloud_cluster->width = cloud_cluster->points.size();
        cloud_cluster->height = 1;
        cloud_cluster->header = cloud_in->header;
        cloud_cluster->is_dense = cloud_in->is_dense;

        cerr << "PointCloud representing the Cluster: " << cloud_cluster->points.size () << " data points." << endl;
        stringstream ss;
        ss << "cloud_cluster_" << j << ".pcd";
        writer.write<PointXYZ> (ss.str (), *cloud_cluster, false);


        //publish manipulated point clusters
        sensor_msgs::PointCloud2 cluster_out;
        toROSMsg(*cloud_cluster,cluster_out);
        this->pc_merged_pub.publish(cluster_out);

        j++;
    }
    std_msgs::String j_string;
    stringstream ss;
    ss << j;
    j_string.data = ss.str();
    this->nr_segmented_pc_pub.publish(j_string);
}




void CPCMerge::pc_cam1_callback(const sensor_msgs::PointCloud2ConstPtr& pcl_in)
{
  ROS_INFO("pc_cam1 received!");
  sensor_msgs::PointCloud2 pcl_out;

  //search for tf transform for pc from cam1
  bool foundTransform = tf_listener->waitForTransform("/world", "/openni_depth_optical_frame",  (*pcl_in).header.stamp, ros::Duration(3.0));
  if (foundTransform)
  {
    ROS_INFO("Transform pc_cam1: openni_depth_optical_frame to world found");
    pcl_ros::transformPointCloud("/world", *pcl_in, pcl_out, *tf_listener);
  }
  else {
    ROS_WARN("No pc_cam1 transform found");
  }

  this->pc_cam1 = pcl_out;
  this->pc_cam1_filled = true;

  if (this->pc_cam2_filled == true)  //!!!!!!!!!!!!!! david ACHTUNG hier aender fuer: nehme nur pc1
  {
	  this->publish_merged_pc();
  }
}


void CPCMerge::pc_cam2_callback(const sensor_msgs::PointCloud2ConstPtr& pcl_in)
{
  ROS_INFO("pc_cam2 received");
  sensor_msgs::PointCloud2 pcl_out; // initializing missing??????????

  //search for tf transform for pc from cam1
  bool foundTransform = tf_listener->waitForTransform("/world", "/openni_depth_optical_frame2",  (*pcl_in).header.stamp, ros::Duration(3.0));
  if (foundTransform)
  {
    ROS_INFO("Transform pc_cam2: openni_depth_optical_frame to world found");
    pcl_ros::transformPointCloud("/world", *pcl_in, pcl_out, *tf_listener);
  }
  else {
    ROS_WARN("No pc_cam2 transform found");
  }

  this->pc_cam2 = pcl_out;
  this->pc_cam2_filled = true;
  if (this->pc_cam1_filled == true) //david !!! evtl. aendern
  {
	  this->publish_merged_pc();
  }
}



int main (int argc, char** argv)
{
  ros::init(argc, argv, "pc_merge");
  ros::NodeHandle nh;
  tf_listener = new tf::TransformListener();
  CPCMerge * pc_merge = new CPCMerge(nh);

  ros::spin();
  delete tf_listener;
  return (0);
}
