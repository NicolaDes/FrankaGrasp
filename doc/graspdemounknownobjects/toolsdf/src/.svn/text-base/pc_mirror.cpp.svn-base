/*
 * David Fischinger -TUW
 * 25.10. 2011
 *
 * 	use first pc_mirror and then pc_cut!
 * 	usage: change path, runningNumber limits in for-loop
 *
 * input:
 *
 *   reads pcd files from folder
 *
 * output:
 *
 *   mirrors coordinates (w.r.t. x,y, and x-y-axis)
 *   saves output cloud
 *
 */

#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include "pcl/io/io.h"
#include "std_msgs/String.h"
#include <string.h>
#include <sstream>

using namespace std;


int main (int argc, char** argv)
{
	string path = "/home/grasp/David/GPDatabase/badgps/twocams/badmanual/";

	// loop which reads all pcd-files
	for (int runningNumber = 2000; runningNumber < 2251; runningNumber++)
	{

		cout << runningNumber << endl;
		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_out_x (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_out_y (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_out_b (new pcl::PointCloud<pcl::PointXYZ>);
		stringstream ss_file_in;

		pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_in (new pcl::PointCloud<pcl::PointXYZ>);

		ss_file_in << path << "pcd_" << runningNumber << ".pcd";

		if (pcl::io::loadPCDFile<pcl::PointXYZ> (ss_file_in.str(), *cloud_in) == -1) //load the file
		{
			cout << "\n Couldn't read file (%d) \n" << runningNumber << endl;
			continue;
		}

		//manipulate pcd
		stringstream ss_file_out_x, ss_file_out_y, ss_file_out_b; //mirrors x-values, y-values and both (_b)
		ss_file_out_x << path << "pcd_" << runningNumber << "_x" << ".pcd";
		ss_file_out_y << path << "pcd_" << runningNumber << "_y" << ".pcd";
		ss_file_out_b << path << "pcd_" << runningNumber << "_b" << ".pcd";

		pcl::copyPointCloud<pcl::PointXYZ>(*cloud_in, *cloud_out_x);
		pcl::copyPointCloud<pcl::PointXYZ>(*cloud_in, *cloud_out_y);
		pcl::copyPointCloud<pcl::PointXYZ>(*cloud_in, *cloud_out_b);

		for (int i = 0; i < cloud_in->points.size(); ++i)
		{
			//mirror about y axis (=> x values are multiplied by -1)
			cloud_out_x->points[i].x = -cloud_out_x->points[i].x;
			cloud_out_y->points[i].y = -cloud_out_y->points[i].y;
			cloud_out_b->points[i].x = -cloud_out_b->points[i].x;
			cloud_out_b->points[i].y = -cloud_out_b->points[i].y;
		}

		pcl::io::savePCDFile(ss_file_out_x.str(), *cloud_out_x);
		pcl::io::savePCDFile(ss_file_out_y.str(), *cloud_out_y);
		pcl::io::savePCDFile(ss_file_out_b.str(), *cloud_out_b);

	}
	return (0);
}
